import e from"dd-trace";import*as t from"prom-client";function s(e,t,s){const r={Resolver:s.Resolver,Service:s.Service,Protocol:s.Protocol,Result:s.Result};e.Histogram("resolver_request_duration_histogram_milliseconds",t,r)}function r(e,t,s){const r={Service:s.Service,Vendor:s.Vendor,Call:s.Call,Result:s.Result};e.Histogram("api_request_duration_histogram_milliseconds",t,r)}function i(e,t){return(s,r,i)=>{const c=Date.now();r.on("finish",(()=>{const s=Date.now(),r={Service:t.Service};e.Histogram("http_request_duration_histogram_milliseconds",s-c,r)})),i()}}function c(e,t,s){const r={Service:s.Service,Function:s.Function,Result:s.Result};e.Histogram("call_duration_histogram_milliseconds",t,r)}var o,a;function n(e,t,s){const r={Service:s.Service,Table:s.Table,Method:s.Method,Result:s.Result};e.Histogram("database_duration_histogram_milliseconds",t,r)}!function(e){e.Insert="insert",e.Update="update",e.Delete="delete",e.Select="select"}(o||(o={}));class u{constructor(e){this.client=e}static getInstance(e){return u.instance||(u.instance=new u(e)),u.instance}Histogram(e,t,s){this.client.Histogram(e,t,s)}Count(e,t){this.client.Count(e,t)}Gauge(e,t,s){this.client.Gauge(e,t,s)}Summary(e,t,s){this.client.Summary(e,t,s)}ResolverMetric(e,t){return s(this.client,e,t)}ApiMetric(e,t){return r(this.client,e,t)}HttpMiddlewareMetric(e){return i(this.client,e)}CallMetric(e,t){return c(this.client,e,t)}DatabaseMetric(e,t){return n(this.client,e,t)}}!function(e){e.Success="success",e.Error="error"}(a||(a={}));class l{constructor(){e.init()}Count(t,s,r=1){e.dogstatsd.increment(t,r,s)}Histogram(t,s,r,i=1){e.dogstatsd.distribution(t,s,r)}Gauge(t,s,r,i=1){e.dogstatsd.gauge(t,s,r)}Summary(e,t,s,r=1){console.log("Summary is unsupported")}}class m{constructor(){this.HistogramVecs={},this.CounterVecs={},this.GaugeVecs={},this.SummaryVecs={}}CreateHistogramVec(e,s,r,i){this.HistogramVecs[e]||(this.HistogramVecs[e]={Labels:r,Metric:new t.Histogram({name:e,help:s,labelNames:r,buckets:i})})}CreateCounterVec(e,s,r){this.CounterVecs[e]||(this.CounterVecs[e]={Labels:r,Metric:new t.Counter({name:e,help:s,labelNames:r})})}CreateGaugeVec(e,s,r){this.GaugeVecs[e]||(this.GaugeVecs[e]={Labels:r,Metric:new t.Gauge({name:e,help:s,labelNames:r})})}CreateSummaryVec(e,s,r){this.SummaryVecs[e]||(this.SummaryVecs[e]={Labels:r,Metric:new t.Summary({name:e,help:s,labelNames:r})})}Histogram(e,t,s){const r=Object.keys(s);this.HistogramVecs[e]||this.CreateHistogramVec(e,e,r);const i=[];for(const t of this.HistogramVecs[e].Labels)i.push(s[t]);this.HistogramVecs[e].Metric.labels(...i).observe(t)}Count(e,t){const s=Object.keys(t);this.CounterVecs[e]||this.CreateCounterVec(e,e,s);const r=[];for(const s of this.CounterVecs[e].Labels)r.push(t[s]);this.CounterVecs[e].Metric.labels(...r).inc()}Gauge(e,t,s){const r=Object.keys(s);this.GaugeVecs[e]||this.CreateGaugeVec(e,e,r);const i=[];for(const t of this.GaugeVecs[e].Labels)i.push(s[t]);this.GaugeVecs[e].Metric.labels(...i).set(t)}Summary(e,t,s){const r=Object.keys(s);this.SummaryVecs[e]||this.CreateSummaryVec(e,e,r);const i=[];for(const t of this.SummaryVecs[e].Labels)i.push(s[t]);this.SummaryVecs[e].Metric.labels(...i).observe(t)}}export{r as ApiMetric,c as CallMetric,l as DataDogClient,n as DatabaseMetric,i as HttpMiddlewareMetric,u as Metrics,m as PrometheusClient,s as ResolverMetric,a as Result};
